name: Salesforce 2GP Package Version Create Action
description: Create a new package version for a Salesforce package

inputs:
  auth-url:
    description: The URL of the Dev Hub org. This is used to create an auth file for the Dev Hub org.
    required: true
  packaging-directory:
    description: The directory containing the Salesforce project.
    required: true
  package:
    description: ID (starts with 0Ho) or alias of the package to create a version of.
    required: true
  target-dev-hub:
    description: Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.
    required: true
  installation-key-bypass:
    description: |
      Bypass the installation key requirement. (either --installation-key or --installation-key-bypass is required)
      If you bypass this requirement, anyone can install your package.
    required: false
  skip-validation:
    description: |
      Skip validation during package version creation; you can’t promote unvalidated package versions.
      Skips validation of dependencies, package ancestors, and metadata during package version creation.
      Skipping validation reduces the time it takes to create a new package version, but you can promote only validated package versions.
      Skipping validation can suppress important errors that can surface at a later stage.
      You can specify skip validation or code coverage, but not both.
      Code coverage is calculated during validation.
    required: false
  code-coverage:
    description: |
      Calculate and store the code coverage percentage by running the packaged Apex tests included in this package version.
      Before you can promote and release a managed or unlocked package version, the Apex code must meet a
      minimum 75% code coverage requirement. We don’t calculate code coverage for org-dependent unlocked packages or
      for package versions that specify --skip-validation.
    required: false
  async-validation: 
    description: |
      Return a new package version before completing package validations.
      Specifying async validation returns the package version earlier in the process, allowing you to install and test the new version right away.
      If your development team is using continuous integration (CI) scripts, async validation can reduce your overall CI run time.
    required: false

outputs:
  package-version-id: # id of output
    description: The package version id
  package-version-number:
    description: The package version number
  package-report:
    description: The package report
    # An JSON representation of the package report
    # {
    #    "success": true,
    #    "Id": "<id>",
    #    "Status": "Success",
    #    "Package2Id": "<package-id>",
    #    "Package2Name": "<package-name>",
    #    "Package2VersionId": "<package-version-id>",
    #    "SubscriberPackageVersionId": "<subscriber-package-version-id>",
    #    "Tag": null,
    #    "Branch": null,
    #    "Error": [],
    #    "CreatedDate": "2025-08-23 03:15",
    #    "HasMetadataRemoved": false,
    #    "CodeCoverage": null,
    #    "VersionNumber": "0.1.0.25",
    #    "HasPassedCodeCoverageCheck": false,
    #    "CreatedBy": "005gL000006IxB3QAK",
    #    "ConvertedFromVersionId": null,
    #    "TotalNumberOfMetadataFiles": 0,
    #    "TotalSizeOfMetadataFiles": 0,
    #    "InstallationLink": "https://login.salesforce.com/packaging/installPackage.apexp?p0=<subscriber-package-version-id>"
    # }
  message:
    description: The message from the command execution

runs:
  using: node20
  main: dist/index.js